@startuml
!theme reddress-lightorange
' Include C4-PlantUML via includeurl
!define C4P https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master
!includeurl C4P/C4_Container.puml

' Client side
Person(client, "Client", "Web or Mobile application")

' Server side
System_Boundary(backend, "Backend") {
    ' Entry point
    Container(api_gateway, "API Gateway", "FastAPI", "Entry point for all requests")

    ' Voice service
    Container(nlu_voice_service, "NLU_Voice Service", "Python", "STT → NLU → TTS + routing")

    ' Auth service
    Container(auth_service, "Auth Service", "FastAPI", "Token issuance and validation")

    ' Cinema content service
    Container(movies_service, "Movies Service", "FastAPI", "Cinema content search")

    ' ETL content service
    Container(etl, "ETL Service", "Python + Scheduler", "Synchronization PostgreSQL → Elasticsearch")

    ' Scheduler for model training
    Container(scheduler, "Assistant Model Trainer", "Python + Scheduler", "Periodic training of speech recognition model")

    ' RabbitMQ queues for NLU
    Container(queue_req, "RabbitMQ: requests", "Message Broker", "Queue for NLU requests")
    Container(queue_res, "RabbitMQ: responses", "Message Broker", "Queue for NLU responses")

    ' Data stores
    ContainerDb(redis, "Redis", "In-memory KV Store", "Cache for content and token state")
    ContainerDb(postgres, "PostgreSQL", "Relational DB", "Stores content and users")
    ContainerDb(elastic, "Elasticsearch", "Search engine", "Content search")
    ContainerDb(clickhouse, "ClickHouse", "OLAP DB", "Stores voice search data")
}

' Client interactions
Rel(client, api_gateway, "Voice request", "WebSocket")

' API Gateway ↔ NLU interaction via RabbitMQ
Rel(api_gateway, queue_req, "Publish request", "AMQP")
Rel(queue_req, nlu_voice_service, "Consume request", "AMQP")
Rel(nlu_voice_service, queue_res, "Publish response", "AMQP")
Rel(queue_res, api_gateway, "Consume response", "AMQP")

' Token validation
Rel(api_gateway, auth_service, "Token validation", "HTTP/REST")

' Voice search logging
Rel(api_gateway, clickhouse, "Write voice search logs", "ClickHouse SQL")

' NLU ↔ Movies interaction
Rel(nlu_voice_service, movies_service, "Content search", "HTTP/JSON")

' Model loading and training
Rel(scheduler, clickhouse, "Load training data", "ClickHouse SQL")
Rel(scheduler, nlu_voice_service, "Train model", "HTTP/JSON")

' Movies subsystem
Rel(movies_service, redis, "Content cache", "Redis protocol")
Rel(movies_service, elastic, "Full-text search", "HTTP/JSON")

' Auth subsystem
Rel(auth_service, redis, "Token state", "Redis protocol")
Rel(auth_service, postgres, "User CRUD", "SQLAlchemy Async")

' ETL subsystem
Rel(etl, postgres, "Read content", "SQLAlchemy Async")
Rel(etl, elastic, "Index content", "Async HTTP/Batch")

@enduml