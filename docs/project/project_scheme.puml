@startuml
!theme reddress-lightorange
' Подключаем C4-PlantUML через includeurl
!define C4P https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master
!includeurl C4P/C4_Container.puml

' Клиентская часть
Person(client, "Клиент", "Веб или Мобильное приложение")

' Серверная часть
System_Boundary(backend, "Backend") {
    ' Входная точка
    Container(api_gateway, "API Gateway", "FastAPI", "Точка входа для всех запросов")

    ' Голосовой сервис
    Container(nlu_voice_service, "NLU_Voice‑сервис", "Python", "STT → NLU → TTS + маршрутизация")

    ' Сервис авторизации
    Container(auth_service, "Auth‑сервис", "FastAPI", "Выдача и валидация токенов")

    ' Сервис кинотеатра
    Container(movies_service, "Movies‑сервис", "FastAPI", "Поиск контента кинотеатра")

    ' Сервис ETL контента
    Container(etl, "ETL‑сервис", "Python + Scheduler", "Синхронизация PostgreSQL → Elasticsearch")

    ' Скедулер для обучения модели
    Container(scheduler, "Assistant Model Trainer", "Python + Scheduler", "Периодическое обучение модели распознавания текста")

    ' Очереди RabbitMQ для NLU
    Container(queue_req, "RabbitMQ: requests", "Message Broker", "Очередь запросов в NLU")
    Container(queue_res, "RabbitMQ: responses", "Message Broker", "Очередь ответов от NLU")

    ' Хранилища данных
    ContainerDb(redis, "Redis", "In‑memory KV Store", "Кеш контента и стейта токенов")
    ContainerDb(postgres, "PostgreSQL", "Relational DB", "Хранение контента и пользователей")
    ContainerDb(elastic, "Elasticsearch", "Search engine", "Поиск контента")
    ContainerDb(clickhouse, "ClickHouse", "OLAP DB", "Хранение данных голосового поиска")
}

' Взаимодействия клиента
Rel(client, api_gateway, "Голосовой запрос", "WebSocket")

' Взаимодействие API Gateway ↔ NLU по RabbitMQ
Rel(api_gateway, queue_req, "Публикация запроса", "AMQP")
Rel(queue_req, nlu_voice_service, "Получение запроса", "AMQP")
Rel(nlu_voice_service, queue_res, "Публикация ответа", "AMQP")
Rel(queue_res, api_gateway, "Получение ответа", "AMQP")

' Проверка токена
Rel(api_gateway, auth_service, "Проверка токена", "HTTP/REST")

' Логирование запросов
Rel(api_gateway, clickhouse, "Запись логов голосового поиска", "ClickHouse SQL")

' Взаимодействие NLU ↔ Movies
Rel(nlu_voice_service, movies_service, "Поиск контента", "HTTP/JSON")

' Загрузка и обучение модели
Rel(scheduler, clickhouse, "Загрузка обучающих данных", "ClickHouse SQL")
Rel(scheduler, nlu_voice_service, "Обучение модели", "HTTP/JSON")

' Подсистема movies
Rel(movies_service, redis, "Кеш контента", "Redis protocol")
Rel(movies_service, elastic, "Полнотекстовый поиск", "HTTP/JSON")

' Подсистема auth
Rel(auth_service, redis, "Состояние токенов", "Redis protocol")
Rel(auth_service, postgres, "CRUD пользователей", "SQLAlchemy Async")

' Подсистема ETL
Rel(etl, postgres, "Чтение контента", "SQLAlchemy Async")
Rel(etl, elastic, "Индексация контента", "Async HTTP/Batch")

@enduml
