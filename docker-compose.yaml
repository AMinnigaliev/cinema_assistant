services:
  nginx:
    image: nginx:1.25.3-alpine
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "${PROJECT_PORT}:8000"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs:/etc/nginx/templates:ro
      - ./nginx/data/static.html:/data/static.html:ro
    env_file: .env
    depends_on:
      - auth_service
      - movies_service
    networks:
      - sec_network

  api_service:
    build: ./api_service
    container_name: ${API_SERVICE_HOST}
    restart: unless-stopped
    expose:
      - "${API_SERVICE_PORT}"
    env_file:
      - .env
    volumes:
      - ./voice_files/incoming:/voice_files/incoming
      - ./voice_files/outgoing:/voice_files/outgoing
    depends_on:
      rabbitmq:
        condition: service_healthy
      nlp_clickhouse:
        condition: service_healthy
    networks:
      - sec_network

  auth_service:
    build: ./auth_service
    container_name: ${AUTH_SERVICE_HOST}
    restart: unless-stopped
    expose:
      - "${AUTH_SERVICE_PORT}"
      - AUTH_SERVICE_URL=http://auth_service:${AUTH_SERVICE_PORT}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - sec_network

  movies_service:
    build: movies_service
    container_name: ${MOVIES_SERVICE_HOST}
    restart: unless-stopped
    expose:
      - "${MOVIES_SERVICE_PORT}"
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - sec_network

  assistant_model_trainer:
    build:
      context: ./assistant_model_trainer
    container_name: assistant_model_trainer
    env_file: .env
    volumes:
      - ./models/movie_ner_model:/app/movie_ner_model
    depends_on:
      nlp_clickhouse:
        condition: service_healthy
    networks:
      - sec_network

  nlu_voice_service:
    build:
      context: ./nlu_voice_service
    container_name: nlu_voice_service
    env_file: .env
    depends_on:
      - movies_service
      - rabbitmq
    volumes:
      - ./voice_files:/app/voice_files  # Монтированная директория для хранения голосовых аудиофайлов
    networks:
      - sec_network

  etl_service:
    build:
      context: ./etl_service
    container_name: etl_service
    env_file: .env
    depends_on:
      postgres:
        condition: service_started
      redis:
        condition: service_started
      elasticsearch:
        condition: service_started
    networks:
      - sec_network

  nlp_clickhouse:
    image: clickhouse/clickhouse-server:25.4.2
    container_name: ${NLP_CLICKHOUSE_HOST}
    env_file:
      - .env
    environment:
      - CLICKHOUSE_DB=$NLP_CLICKHOUSE_DB
      - CLICKHOUSE_USER=$NLP_CLICKHOUSE_USER
      - CLICKHOUSE_PASSWORD=$NLP_CLICKHOUSE_PASSWORD
    healthcheck:
      test: wget --spider -q http://localhost:8123 || exit 1
      interval: 5s
      timeout: 2s
      retries: 10
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    networks:
      - sec_network

  redis:
    image: redis:6.2
    container_name: ${REDIS_HOST}
    command: [ "redis-server", "--port", "${REDIS_PORT}", "--requirepass", "${REDIS_PASSWORD}" ]
    restart: unless-stopped
    expose:
      - "${REDIS_PORT}"
    healthcheck:
      test: [ "CMD", "redis-cli", "-p", "${REDIS_PORT}", "--raw", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - sec_network

  elasticsearch:
    image: elasticsearch:8.6.2
    container_name: ${ELASTIC_HOST}
    restart: unless-stopped
    environment:
      - ES_LOG_LEVEL=ERROR
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - http.port=${ELASTIC_PORT}
      - ELASTIC_USERNAME=$ELASTIC_USERNAME
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
    expose:
      - "${ELASTIC_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s ${ELASTIC_SCHEME}://${ELASTIC_HOST}:${ELASTIC_PORT} >/dev/null || exit 1" ]
      interval: 10s
      retries: 5
      start_period: 120s
      timeout: 10s
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - sec_network

  postgres:
    image: postgres:16-alpine
    container_name: ${PG_HOST}
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${PG_NAME}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      PG_USER: ${PG_USER}
      PG_NAME: ${PG_NAME}
    command: [ "postgres", "-c", "listen_addresses=*", "-c", "port=${PG_PORT}" ]
    expose:
      - "${PG_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_NAME}" ]
      interval: 10s
      retries: 5
      timeout: 10s
    volumes:
      - ./postgres/00-init.sh:/docker-entrypoint-initdb.d/00-init.sh:ro
      - ./postgres/01-dump.sql:/postgres_dump/01-dump.sql:ro
      - pg_data:/var/lib/postgresql/data
    networks:
      - sec_network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_AMQP_PORT}:5672"
      - "${RABBITMQ_WEB_INTERFACE_PORT}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sec_network

networks:
  sec_network:
    driver: bridge

volumes:
  es_data:
  pg_data:
  static_media_volume:
  clickhouse_data:
  rabbitmq_data:
